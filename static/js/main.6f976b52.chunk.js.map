{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","total_counters","className","href","Counter","state","value","props","counter","tags","this","onIncrement","onReset","onDelete","Fragment","children","customClasses","style","fontSize","formatCount","onClick","classes","Component","Counters","counters","onResetAll","map","key","id","App","handleIncrement","counter_id","updated_counters","setState","handleReset","handleDelete","deleted","filter","c","handleResetAll","reset_all","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f976b52.chunk.js","sourcesContent":["import React from 'react';\r\n//this component is a stateless functional component because there is no event handler in it, to deal with these type of components\r\n//we use a function instead of a class for rendering purpose\r\n// class Navbar extends Component {\r\n//     render() {\r\n//         return (\r\n//                 <nav className=\"navbar navbar-light bg-light\">\r\n//                     <a className=\"navbar-brand\" href=\"#\">\r\n//                         Navbar <span className=\"badge badge-pill badge-secondary\">{this.props.counters}</span></a>\r\n//                 </nav>\r\n//         );\r\n//     }\r\n// }\r\n//the same can be done with a functional method\r\n// const Navbar=props=>{ //can be any name but using props is conventional and it's value is set to this.props by default\r\n//     return (\r\n//                 <nav className=\"navbar navbar-light bg-light\">\r\n//                     <a className=\"navbar-brand\" href=\"#\">\r\n//                         Navbar <span className=\"badge badge-pill badge-secondary\">{props.total_counters}</span></a>\r\n//                 </nav>\r\n//         );\r\n// }\r\n//to get rid of the 'this.props' or 'props' we use object destructuring, so the above can be done by\r\nconst Navbar=({total_counters})=>{\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n                Navbar <span className=\"badge badge-pill badge-secondary\">{total_counters}</span></a>\r\n            <h1 className=\"text-primary display-1\">@iamibadd</h1>\r\n        </nav>\r\n    );\r\n}\r\nexport default Navbar;","import React, {Component} from 'react';\r\n\r\nclass Counter extends Component {\r\n    //we can't use let var or const in while defining any variable or object or array in a class, they are used in class methods\r\n    //state is conventional to use and state is kind of 'context' that we are passing to the screen\r\n    //props vs state->props are public and can be used in any component, while state is private and is only accessed in it's own component\r\n    //props are readonly and they can't be further changed or assigned. Changes can be done by assigning them into state portion.\r\n    state = {\r\n        // count: 0,\r\n        //the below 'value' attribute is used in 'counter.jsx' file and we are setting its value to what is passed in that object\r\n        //props are the attributes that we pass through a component using a single js object eg <Counter abc={} cdf={}/>, here 'abc' and 'cdf' are props.\r\n        //children is a special kind of props which is passed through opening and closing tags of a react component.\r\n        //props and children are called in the child class from the parent class\r\n        //for example <Counter id={}><h1>Hellow</h2></Counter>, here 'id' is props and <h1></h1> is children.\r\n        // value: this.props.value,\r\n        //the above can be done by for a single source of truth\r\n        value: this.props.counter.value,\r\n        // imageURL: 'https://picsum.photos/200', //generates a random 200*200 image\r\n        tags: ['tag1', 'tag2', 69]\r\n    };\r\n\r\n    render() {\r\n        //to get rid of the 'this.props' or 'props' we use object destructuring, so the above can be done by\r\n        const {onIncrement,onReset,onDelete}=this.props\r\n        return (<React.Fragment>\r\n                <h6>Hello React js! I am counter.jsx file.</h6>\r\n                {/*<img className=\"rounded-circle\" src={this.state.imageURL} alt=\"\"/>*/}\r\n                {/*<span>{this.state.count+1}</span>*/}\r\n                {/*<span className=\"badge badge-primary m-2\" style={{fontSize:50}}>{this.formatCount()}</span>*/}\r\n                {/*Custom classes*/}\r\n                {this.props.children}\r\n                <span className={this.customClasses()} style={{fontSize: 50}}>{this.formatCount()}</span>\r\n                {/*In event handler we pass function without '()'*/}\r\n                {/*for the local state*/}\r\n                {/*<button className='btn btn-success' onClick={this.handleIncrement}>Increment</button>*/}\r\n                {/*for a single source of truth*/}\r\n                <button className='btn btn-success' onClick={onIncrement}>Increment</button>\r\n                <button className='btn btn-secondary m-2' onClick={onReset}>Reset</button>\r\n                <button className='btn btn-danger m-2' onClick={onDelete}>Delete</button>\r\n                {/*If we have a parametric handler then we will pass the function like*/}\r\n                {/*<button className='btn btn-danger m-2' onClick={() => this.handleReset(parameter)}>Reset</button>*/}\r\n                {/*Rendering lists or arrays*/}\r\n                {/*<ul className=\"m-5\">*/}\r\n                {/*    {this.state.tags.map(tag=><li key={tag}>{tag}</li>)}*/}\r\n                {/*</ul>*/}\r\n                {/*Conditional rendering, as there is no if else in react so we will use '&&' for the if statement without any else.\r\n                Or the alternative is defining a function and then render it as we used above.*/}\r\n                {/*{this.state.tags.length !== 0 && <ul className=\"m-5\">*/}\r\n                {/*    {this.state.tags.map(tag => <li key={tag}>{tag}</li>)}*/}\r\n                {/*</ul>}*/}\r\n                {/*/!*If array is empty*!/*/}\r\n                {/*{this.state.tags.length === 0 && <h6 className=\"text-secondary\">No item in the list!</h6>}*/}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    formatCount() {\r\n        //object destructuring\r\n        // const {value} = this.state;//this value is for the local state\r\n        const {value} = this.props.counter;//this value is for a single source of truth\r\n        //if count is 0 return Zero else return count\r\n        return value === 0 ? 'Zero' : value;\r\n        //the same can be done with below code\r\n        // return this.state.count === 0 ? 'Zero' : this.state.count;\r\n        //we can also return something like below due to jsx format\r\n        // return count === 0 ? <h1>Zero</h1> : <h1>{count}</h1>\r\n    };\r\n\r\n    customClasses() {\r\n        let classes = 'm-2 badge badge-';\r\n        // classes = classes + (this.state.value === 0 ? 'warning' : 'primary')//this value is for the local state\r\n        classes = classes + (this.props.counter.value === 0 ? 'warning' : 'primary')//this value is for the local state\r\n        return classes;\r\n    }\r\n\r\n    //we have not used the default function style for the below method because in this case,the state of count is changed on need,\r\n    //so we must use arrow functions for such conditions, and such conditions are known as binding.\r\n    //and in above methods we are just checking count value for some conditions without changing its state.\r\n    // handleIncrement = () => this.setState({value: this.state.value + 1})//this value is for the local state\r\n    // handleReset = () => this.setState({value: 0})\r\n}\r\n\r\nexport default Counter;","import React, {Component} from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nexport default class Counters extends Component {\r\n\r\n    render() {\r\n        //to get rid of the 'this.props' or 'props' we use object destructuring, so the above can be done by\r\n        const {counters,onIncrement,onDelete,onReset,onResetAll}=this.props\r\n        return (\r\n            <div><h1>Counters.jx file</h1>\r\n                <button className=\"btn btn-warning\" onClick={onResetAll}>Reset all</button>\r\n                {/*we are using the counter.jsx file here in this file aka including in php*/}\r\n                {counters.map(counter =>\r\n                    // All the props or children used here must be called or assigned in the 'Counter' class or 'counter.jsx' file\r\n                    // as they are being called in the below 'Counter' component\r\n                    // 'key'is not a prop and in map function 'key' attribute is must\r\n                    // <Counter key={counter.id} value={counter.value} onDelete={() => this.handleDelete(counter.id)}>\r\n                    //     the above can be done\r\n                    <Counter key={counter.id}\r\n                             counter={counter}\r\n                             onDelete={() => onDelete(counter.id)}\r\n                        // we have used counter because we are passing an object in the function\r\n                        //      onIncrement={() => this.handleIncrement(counter)}\r\n                        //the alternative for passing id as an argument\r\n                             onIncrement={() => onIncrement(counter.id)}\r\n                             onReset={() => onReset(counter.id)}>\r\n                        <h6>Props.children#{counter.id}</h6>\r\n                    </Counter>)}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\nimport Navbar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\n//project tree goes like this\n//App ->Main component, Counters and Navbar -> Children components of App, Counter -> Child component of Counters\nclass App extends Component {\n  render() {\n    return (\n        <React.Fragment>\n          <main className='container'>\n            <Navbar total_counters={this.state.counters.filter(c=>c.value>0).length}/>\n            <Counters counters={this.state.counters}\n                      onIncrement={this.handleIncrement}\n                      onReset={this.handleReset}\n                      onDelete={this.handleDelete}\n                      onResetAll={this.handleResetAll}/>\n          </main>\n        </React.Fragment>\n    );\n  }\n\n  state = {\n    //we can't assign counters as const var or let because 'counters' is a state object\n    counters: [\n      {id: 1, value: 4},\n      {id: 2, value: 0},\n      {id: 3, value: 0},\n      {id: 4, value: 0},\n    ],\n  }\n\n  handleIncrement = counter_id => {\n    let updated_counters = [...this.state.counters]\n    //if you want to pass argument as an object then use this approach of index\n    // let index = updated_counters.indexOf(counter_id)\n    // updated_counters[index].value++;\n    //or if you want to pass argument as an id then use this approach\n    // we are using counter_id-1 because the id attribute in counters is starting from 1 and index starts from 0\n    updated_counters[counter_id - 1].value++;\n    this.setState({counters: updated_counters})\n  }\n  handleReset = counter_id => {\n    let updated_counters = [...this.state.counters]\n    updated_counters[counter_id - 1].value = 0\n    this.setState({updated_counters});\n  }\n  handleDelete = counter_id => {\n    //will keep the remaining and remove the one clicked.\n    const deleted = this.state.counters.filter(c => c.id !== counter_id);\n    this.setState({counters: deleted});\n  }\n\n  handleResetAll = () => {\n    const reset_all = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({counters: reset_all});\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n// import {register} from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        < App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}